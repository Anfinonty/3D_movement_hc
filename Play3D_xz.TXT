
//06/16/2023
//3D fully, visuals still broken
//sleepy

//06/17/2023
//visuals tweaked abit to work better, axis movement is still improper
//PROPER IMPLEMENTATION ADDED

//06/18/2023
//Working on it....
//Still using viz_gradients
//yeyeye epic its now been properly implemented (x-z no longer weird)
//Refactored

F64 
player_x=0,
player_y=0,
player_z=0,
player_é=0,
player_head_y_é=0,
eye_screen_dist=350;


#define DLINE_NUM	2000


//-----------------------
F64 GetDistance(F64 x1,F64 y1,F64 x2,F64 y2)
{
  F64 dist=Sqrt(Pow(y2-y1,2)+Pow(x2-x1,2));
  return dist;
}

F64 GetRotateAngle(F64 x,F64 y) 
{
  F64 adj=0,hypo=0,é=0;
  adj=x;
  hypo=GetDistance(x,y,0,0);
  é=ACos(adj/hypo);
  if (x<0) {
    if (y<0) {
      é=pi-é;
    } else {
      é=pi+é;
    }
  } else if (y<0) {
    é=2*pi-é;
  }
  return é;
}

F64 CalculateGradient(F64 y2,F64 y1,F64 x2,F64 x1) {
  F64 denominator=x2-x1;
  if (denominator!=0) {
    return (y2-y1)/denominator;
  }
  return 0;
}


I64 RandNum(I64 min,I64 max)
{
  I64 m=0;
    if (min<0) {
      m=min-1;
    }
    return m+Rand*(max-m+1);
}
//-----------------------

class DLine
{
  F64
//True Axis
  x1,y1,z1,
  x2,y2,z2,

//Axis shown on screen
  screen_x1,screen_y1,
  screen_x2,screen_y2,

//Gradients From Point to Player, used in Lens Left-Right movement
  //xy_viz_gradient1,
  //zy_viz_gradient1,
  xz_viz_gradient1,

  //xy_viz_gradient2,
  //zy_viz_gradient2,
  xz_viz_gradient2,


//Distances From point to Player
  xz_dist1,
  xz_dist2,

//Angles
  xz_é1,//used for calculating xzy_é & more
  xz_é2,
  xzy_é1,
  xzy_é2,


//3D Distances
  xzy_dist1,
  xzy_dist2,

//3D Gradients, For Lens Up/Down movement
  xzy_viz_gradient1,
  xzy_viz_gradient2,


//Bird's Eye View
  xz_cam_x1,
  xz_cam_z1,
  xz_cam_x2,
  xz_cam_z2;

} DLine[DLINE_NUM];

Bool 
rst_down,
rst_up,
rst_left,
rst_right,
rst_jump,
rst_sink,
rst_turn_clockwise,
rst_turn_anticlockwise,
rst_look_up,
rst_look_down;


U0 CalculateDLineGradient(I64 i) {
/***
***/

  F64 x1=DLine[i].x1-player_x,
      y1=DLine[i].y1-player_y,
      z1=DLine[i].z1-player_z,

      x2=DLine[i].x2-player_x,
      y2=DLine[i].y2-player_y,
      z2=DLine[i].z2-player_z;


  DLine[i].xz_dist1=GetDistance(x1,z1,0,0);
  DLine[i].xz_é1=GetRotateAngle(x1,z1);
  x1=DLine[i].xz_dist1*Cos(DLine[i].xz_é1-player_é);
  z1=DLine[i].xz_dist1*Sin(DLine[i].xz_é1-player_é);

  //xz-1
  DLine[i].xz_viz_gradient1=CalculateGradient(z1,0,x1,0);
  DLine[i].xzy_viz_gradient1=CalculateGradient(DLine[i].y1,player_y,DLine[i].xz_dist1,0);
  DLine[i].xzy_é1=ATan(y1/DLine[i].xz_dist1); //Find 3D angle
  //DLine[i].xzy_dist1=DLine[i].xz_dist1*Cos(DLine[i].xzy_é1);//unused


  DLine[i].xz_dist2=GetDistance(x2,z2,0,0);
  DLine[i].xz_é2=GetRotateAngle(x2,z2);  
  x2=DLine[i].xz_dist2*Cos(DLine[i].xz_é2-player_é);
  z2=DLine[i].xz_dist2*Sin(DLine[i].xz_é2-player_é);

  //xz-2
  DLine[i].xz_viz_gradient2=CalculateGradient(z2,0,x2,0);
  DLine[i].xzy_viz_gradient2=CalculateGradient(DLine[i].y2,player_y,DLine[i].xz_dist2,0);
  DLine[i].xzy_é2=ATan(y2/DLine[i].xz_dist2); //Find 3D angle
  //DLine[i].xzy_dist2=DLine[i].xz_dist2*Cos(DLine[i].xzy_é2);//unused
} 


U0 SetDLineOnScreen(I64 i) {
  //Point to Player (x,y,z)
  //At x=eye_screen_dist, what is the (y on screen and z on screen) 
  //using scales 
//Point1
  DLine[i].screen_x1=GR_WIDTH/2//Shift to Center X
	//ScreenX X-Z Distance at eyescreen_dist 
	  //via xz_gradient
	+(eye_screen_dist*Cos(DLine[i].xzy_é1)*DLine[i].xz_viz_gradient1);

  DLine[i].screen_y1=GR_HEIGHT/2//Shift to Center Y
	//Y at eyescreen_dist via xzy_viz_gradient
	-(eye_screen_dist*Sin(DLine[i].xzy_é1)*Abs(DLine[i].xzy_viz_gradient1));


//Point2
  DLine[i].screen_x2=GR_WIDTH/2
	+(eye_screen_dist*Cos(DLine[i].xzy_é2)*DLine[i].xz_viz_gradient2);

  DLine[i].screen_y2=GR_HEIGHT/2
	-(eye_screen_dist*Sin(DLine[i].xzy_é2)*Abs(DLine[i].xzy_viz_gradient2));
}

U0 SetDLineXZ(I64 i) {
  F64 tmp_é,tmp_dist;
  tmp_é=GetRotateAngle(DLine[i].x1-player_x,DLine[i].z1-player_z);
  tmp_dist=GetDistance(DLine[i].x1-player_x,DLine[i].z1-player_z,0,0);
  DLine[i].xz_cam_x1=GR_WIDTH/2+tmp_dist*Cos(tmp_é-player_é);
  DLine[i].xz_cam_z1=GR_HEIGHT/2+tmp_dist*Sin(tmp_é-player_é);

  tmp_é=GetRotateAngle(DLine[i].x2-player_x,DLine[i].z2-player_z);
  tmp_dist=GetDistance(DLine[i].x2-player_x,DLine[i].z2-player_z,0,0);
  DLine[i].xz_cam_x2=GR_WIDTH/2+tmp_dist*Cos(tmp_é-player_é);
  DLine[i].xz_cam_z2=GR_HEIGHT/2+tmp_dist*Sin(tmp_é-player_é);
}

/*U0 SetDLineXY(I64 i) {
  F64 tmp_é,tmp_dist;
  tmp_é=GetRotateAngle(DLine[i].x1-player_x,DLine[i].y1-player_y);
  tmp_dist=GetDistance(DLine[i].x1-player_x,DLine[i].y1-player_y,0,0);
  DLine[i].xy_cam_x1=GR_WIDTH/2+tmp_dist*Cos(tmp_é-player_head_y_é);
  DLine[i].xy_cam_y1=GR_HEIGHT/2+tmp_dist*Sin(tmp_é-player_head_y_é);

  tmp_é=GetRotateAngle(DLine[i].x2-player_x,DLine[i].y2-player_y);
  tmp_dist=GetDistance(DLine[i].x2-player_x,DLine[i].y2-player_y,0,0);
  DLine[i].xy_cam_x2=GR_WIDTH/2+tmp_dist*Cos(tmp_é-player_head_y_é);
  DLine[i].xy_cam_y2=GR_HEIGHT/2+tmp_dist*Sin(tmp_é-player_head_y_é);
}*/

U0 MovePlayerForward(F64 dist) {
  player_x+=dist*Cos(player_é);
  player_z+=dist*Sin(player_é);
}

U0 MovePlayerSideways(F64 dist) {
  player_x+=dist*Cos(player_é+pi/2);
  player_z+=dist*Sin(player_é+pi/2);
}

U0 AnimateTask(I64) {
  I64 i;
  while (TRUE) {
    if (rst_up) {
      MovePlayerForward(1);
    } else if (rst_down) {
      MovePlayerForward(-1);
    } else if (rst_left) {
      MovePlayerSideways(-1);
    } else if (rst_right) {
      MovePlayerSideways(1);
    } else if (rst_jump) {
      player_y++;
    } else if (rst_sink) {
      player_y--;
    } else if (rst_turn_clockwise) {
      player_é+=0.02;
    } else if (rst_turn_anticlockwise) {
      player_é-=0.02;
    } else if (rst_look_up) {
      if (player_head_y_é<pi/2) {
        player_head_y_é+=0.01;
      }
    } else if (rst_look_down) {
      if (-pi/2<player_head_y_é) {
        player_head_y_é-=0.01;
      }
    }
    if (player_é<0) {
      player_é=2*pi;
    }
    if (player_é>2*pi) {
      player_é=0;
    }

    for (i=0;i<DLINE_NUM;i++) {
      CalculateDLineGradient(i);
      SetDLineOnScreen(i);
      SetDLineXZ(i);
      //SetDLineXY(i);
    }
    Sleep(6);
  }
}

U0 DrawDLine(CTask *task,CDC *dc) {
/***
Make 0,0 the center,then add GR_WIDTH/2 to x and GR_HEIGHT/2 to y

---
*In 2D*
-Upwards angle is the same
-Dist from point to eye
 -> The same as if it is 2D
---


*-From X to Y:* - Up-Down
 Y-Axis = player_y-point_y
 X-Axis = player_x-point_x
 ->é = ATan(Y-Axis/X-Axis)

 Up-Down
 -> Sin(é) = Y-Axis/Dist
 ->Dist from Eye to Point (X/Y)
   = Y-Axis/Sin(é)



*-In 3D, From X to Z:* - Left-Right
 Z-Axis = player_z-point_z
 X-Axis = player_x-point_x
->é = ATan(Z-Axis/X-Axis)

 Left-Right
 -> Sin(é) = Z-Axis/Dist
 ->Dist from Eye to Point (X/Z)
   = Z-Axis/Sin(é)


Camera:

Point:

center+point_z*(player_x-point_x)
center+point_y*(player_x-point_x)

(view axis affected by x-dist between player n point)

Closer = Y increase,
	 Z increase,

Farther = Y lowered
	= Z lowered

***/

  I64 i;
  for (i=0;i<DLINE_NUM;i++) {
    dc->color=RED;
    if ((DLine[i].xz_cam_x1>GR_WIDTH/2 && DLine[i].xz_cam_x2>GR_WIDTH/2) && 
	(0<DLine[i].xz_cam_z1<GR_HEIGHT && 0<DLine[i].xz_cam_z2<GR_HEIGHT)) {
      GrLine(dc,
	  DLine[i].screen_x1,
	  DLine[i].screen_y1,
	  DLine[i].screen_x2,
          DLine[i].screen_y2
      );
    }
  }
}

U0 DrawXZMap(CTask *task,CDC *dc) {
  I64 i;
  dc->color=BLACK;
  GrCircle(dc,GR_WIDTH/2,GR_HEIGHT/2,2);
  GrLine(dc,GR_WIDTH/2,GR_HEIGHT/2,GR_WIDTH/2+10,GR_HEIGHT/2);
  for (i=0;i<DLINE_NUM;i++) {
    dc->color=BLUE;
    GrCircle(dc,DLine[i].xz_cam_x1,DLine[i].xz_cam_z1,2);
    dc->color=LTBLUE;
    GrCircle(dc,DLine[i].xz_cam_x2,DLine[i].xz_cam_z2,2);
  }
}

U0 DrawIt(CTask *task,CDC *dc) {
  DrawDLine(task,dc);
  //DrawXZMap(task,dc);
  dc->color=BLACK;
  GrPrint(dc,0,0,"x:%3.2f",player_x);
  GrPrint(dc,0,8,"y:%3.2f",player_y);
  GrPrint(dc,0,16,"z:%3.2f",player_z);
  GrPrint(dc,0,24,"xzé:%3.2f",player_é);
  GrPrint(dc,0,32," yé:%3.2f",player_head_y_é);
}

U0 SetDLine(I64 i,F64 x1,F64 y1,F64 z1,F64 x2,F64 y2,F64 z2) {
  DLine[i].x1=x1;
  DLine[i].y1=y1;
  DLine[i].z1=z1;
  DLine[i].x2=x2;
  DLine[i].y2=y2;
  DLine[i].z2=z2;
}

U0 Init()
{
  I64 i;
  player_x=0;
  player_y=100;
  player_z=0;
  player_é=0;
//  player_é=pi/2; 
  player_head_y_é=0;

  for (i=0;i<DLINE_NUM;i++) {
    DLine[i].xz_dist1=0;
    DLine[i].xz_dist2=0;

    DLine[i].xz_é1=0;
    DLine[i].xz_é2=0;
    DLine[i].xzy_é1=0;
    DLine[i].xzy_é2=0;
    DLine[i].xzy_dist1=0;
    DLine[i].xzy_dist2=0;

    DLine[i].x1=0;
    DLine[i].y1=0;
    DLine[i].z1=0;
    DLine[i].x2=0;
    DLine[i].y2=0;
    DLine[i].z2=0;
    DLine[i].screen_x1=0;
    DLine[i].screen_y1=0;
    DLine[i].screen_x2=0;
    DLine[i].screen_y2=0;
    //DLine[i].xy_viz_gradient1=0; //unused
    //DLine[i].zy_viz_gradient1=0; //unused
    //DLine[i].xy_viz_gradient2=0; //unused
    //DLine[i].zy_viz_gradient2=0; //unused
    DLine[i].xz_viz_gradient1=0;
    DLine[i].xz_viz_gradient2=0;
    DLine[i].xzy_viz_gradient1=0;
    DLine[i].xzy_viz_gradient2=0;

    DLine[i].xz_cam_x1=0;
    DLine[i].xz_cam_z1=0;
    DLine[i].xz_cam_x2=0;
    DLine[i].xz_cam_z2=0;    

    /*DLine[i].xy_cam_x1=0;
    DLine[i].xy_cam_y1=0;
    DLine[i].xy_cam_x2=0;
    DLine[i].xy_cam_y2=0;    */
  }

  //Demo Map
  /*
  SetDLine(0,10,0,30,80,50,30);
  SetDLine(1,20,0,30,80,50,30);
  SetDLine(2,30,0,30,80,50,30);
  SetDLine(3,40,0,30,80,50,30);
  SetDLine(4,50,0,30,80,50,30);
  SetDLine(5,60,0,30,80,50,30);
  SetDLine(6,70,0,30,80,50,30);
  SetDLine(7,80,0,30,80,50,30);
  SetDLine(8,90,0,30,90,50,30);
  SetDLine(9,100,0,30,90,50,30);

  SetDLine(10,450,0,-30,300+150,30,50);
  SetDLine(11,460,0,-20,300+160,30,50);
  SetDLine(12,470,0,-10,300+170,30,50);
  SetDLine(13,480,0,0,300+180,30,50);


  SetDLine(14,220,0,20,250,30,-40);
  SetDLine(15,220,0,10,250,30,-40);
  SetDLine(16,220,0,0,250,30,-40);
  SetDLine(17,220,0,-10,250,30,-40);
  SetDLine(18,220,0,-20,250,30,-40);
  SetDLine(19,220,0,-30,250,30,-40);
*/  

  //Random Lines Map
  F64 Rand_Z,Rand_Y,Rand_X;
  for (i=0;i<DLINE_NUM;i++) {
    Rand_X=RandNum(-200,200);
    Rand_Y=RandNum(20,200);
    Rand_Z=RandNum(-200,200);
    SetDLine(i,Rand_X+RandNum(-15,15),Rand_Y+RandNum(0,20),Rand_Z+RandNum(-15,15),
	       Rand_X+RandNum(-15,15),Rand_Y+RandNum(0,20),Rand_Z+RandNum(-15,15)
    );
  }

  rst_up=FALSE;
  rst_down=FALSE;
  rst_left=FALSE;
  rst_right=FALSE;
  rst_jump=FALSE;
  rst_sink=FALSE;
  rst_turn_clockwise=FALSE;
  rst_turn_anticlockwise=FALSE;
  rst_look_up=FALSE;
  rst_look_down=FALSE;
}


U0 Run3D()
{
  I64 arg1,arg2;
  SettingsPush;
  AutoComplete;
  WinBorder;
  WinMax;
  DocCursor;
  DocClear;
  Init;
  Fs->animate_task=Spawn(&AnimateTask,NULL,"Animate",,Fs);
  Fs->draw_it=&DrawIt;
  try {
    while (TRUE) {
      switch(GetMsg(&arg1,&arg2,1<<MSG_KEY_DOWN+1<<MSG_KEY_UP)) { 
        case MSG_KEY_DOWN:	  
	  switch (arg1) {
	    case 0:
	      switch(arg2.u8[0]) {
	        case SC_CURSOR_UP:
		  rst_up=TRUE;
	          break;
	        case SC_CURSOR_DOWN:
		  rst_down=TRUE;
	          break;
	        case SC_CURSOR_LEFT:
		  rst_left=TRUE;
	          break;
	        case SC_CURSOR_RIGHT:
		  rst_right=TRUE;
	          break;
	      }
	      break;
	    case ' ':
	      rst_jump=TRUE;
	      break;
	    case 'z':
	      rst_sink=TRUE;
	      break;
	    case 'e':
	      rst_turn_clockwise=TRUE;
	      break;
      	    case 'q':
	      rst_turn_anticlockwise=TRUE;
	      break;
	    case 'w':
	      rst_look_up=TRUE;
	      break;
	    case 's':
	      rst_look_down=TRUE;
	      break;
	    case'\n':
	      Init;
	      break;
       	    case CH_ESC:
            case CH_SHIFT_ESC:
	      goto _done;
 	      break;
	  }
	  break;
	case MSG_KEY_UP:
	  switch (arg1) {
	    case 0:
	      switch(arg2.u8[0]) {
	        case SC_CURSOR_UP:
		  rst_up=FALSE;
	          break;
	        case SC_CURSOR_DOWN:
		  rst_down=FALSE;
	          break;
	        case SC_CURSOR_LEFT:
		  rst_left=FALSE;
	          break;
	        case SC_CURSOR_RIGHT:
		  rst_right=FALSE;
	          break;
	      }
	      break;
	    case ' ':
	      rst_jump=FALSE;
	      break;
	    case 'z':
	      rst_sink=FALSE;
	      break;
	    case 'e':
	      rst_turn_clockwise=FALSE;
	      break;
	    case 'w':
	      rst_look_up=FALSE;
	      break;
	    case 's':
	      rst_look_down=FALSE;
	      break;
      	    case 'q':
	      rst_turn_anticlockwise=FALSE;
	      break;
	  }
	  break;
      }
    }      
_done:
  } catch
    PutExcept;
  SettingsPop;
  MenuPop;
}

Run3D;
