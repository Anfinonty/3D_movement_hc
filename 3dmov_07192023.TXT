
//06/16/2023
//3D fully, visuals still broken
//sleepy

//06/17/2023
//visuals tweaked abit to work better, axis movement is still improper
//PROPER IMPLEMENTATION ADDED

//06/18/2023
//Working on it....
//Still using viz_gradients
//yeyeye epic its now been properly implemented (x-z no longer weird)
//Refactored


//06/19/2023
//Adding head up down movement
//still adding,,,

//06/20/2023
//Cylinder up-down rotation

//06/28/2023
//incorporated matrix transform, some progress is being made finally

//07/05/2023
//left-right turn working, but no progress on up-down turns
//Studying 2DRot, I've been using polar2cartesian all this time XD
//Incorporated yaw pitch and roll, although i'll have to brk it down 2 understnad

//07/06/2023
//breaking em down
//Pitch-yaw matrix made
//rotation now works :D

//07/08/2023
//pitch-roll-pitch matrix allows FULL rotation :DD
//Credit: Talons

//07/19/2023
//research concluded, no proper up-down head rotations though




F64 
player_x=0,
player_y=0,
player_z=0,
é_1=0,
é_2=0,
é_3=0,
eye_screen_dist=100;


#define DPOINT_NUM	100


//-----------------------
F64 GetDistance(F64 x1,F64 y1,F64 x2,F64 y2)
{
  F64 dist=Sqrt(Pow(y2-y1,2)+Pow(x2-x1,2));
  return dist;
}

F64 GetDistance3D(F64 x1,F64 y1,F64 z1,F64 x2,F64 y2,F64 z2)
{
  F64 dist=Sqrt(Pow(y2-y1,2)+Pow(x2-x1,2)+Pow(z2-z1,2));
  return dist;
}

F64 GetRotateAngle(F64 x,F64 y) 
{
  F64 adj=0,hypo=0,é=0;
  adj=x;
  hypo=GetDistance(x,y,0,0);
  é=ACos(adj/hypo);
  if (x<0) {
    if (y<0) {
      é=pi-é;
    } else {
      é=pi+é;
    }
  } else if (y<0) {
    é=2*pi-é;
  }
  return é;
}

F64 CalculateGradient(F64 y2,F64 y1,F64 x2,F64 x1) {
  F64 denominator=x2-x1;
  if (denominator!=0) {
    return (y2-y1)/denominator;
  }
  return 0;
}


I64 RandNum(I64 min,I64 max)
{
  I64 m=0;
    if (min<0) {
      m=min-1;
    }
    return m+Rand*(max-m+1);
}
//-----------------------

F64 m[16];

class DPoint
{
  F64
//True Axis
  _x,_y,_z,_w,
  x,y,z,w,screen_x,screen_y;

} DPoint[DPOINT_NUM];

Bool 
rst_down,
rst_up,
rst_left,
rst_right,
rst_jump,
rst_sink,
rst_turn_clockwise,
rst_turn_anticlockwise,
rst_look_up,
rst_look_down,
rst_heading,
rst_anti_heading;




U0 SetMatrix(F64 fov,F64 aspect_ratio,F64 near,F64 far) {
  I64 i;
  F64 f = 1/Tan(fov);
  for (i=0;i<16;i++) {
    m[i]=0.0;
  }
  m[0]=m[5]=m[10]=m[15]=1.0;

  m[0]=f*aspect_ratio;
  m[5]=f;

  m[10]=(far+near)/(far-near);

  m[11]=1;
  m[14]=(2*near*far)/(near-far);
  m[15]=0;
}

/*F64 LeWrap(F64 é,F64 base=-ã)
{//Returns angle in range [base,base+2*ã)
  F64 res=é%(2*ã);
  if (res>=base+2*ã)
    res-=2*ã;
  else if (res<base)
    res+=2*ã;
  return res;
}*/



U0 MatrixMultiply(I64 i) {
  F64 y1=(DPoint[i].y)-player_y,
      x1=(DPoint[i].x)-player_x,
      z1=(DPoint[i].z)-player_z,
      _x1,_y1,_z1,
      pitch=é_1,
      //yaw=é_1,
      roll=é_2,
      //yaw=é_3;
      heading=é_3;

  //Rotate on the Z axis
  //DPoint[i]._x=x1*Cos(yaw)-y1*Sin(yaw);
  //DPoint[i]._y=x1*Sin(yaw)+y1*Cos(yaw);
  //DPoint[i]._z=z1*1;

  //Rotate on the X axis
  //DPoint[i]._x=x1*1;
  //DPoint[i]._y=y1*Cos(pitch)-z1*Sin(pitch);
  //DPoint[i]._z=y1*Sin(pitch)-z1*Cos(pitch);


  //Rotate on the Y axis
  //DPoint[i]._x=x1*Cos(ang)+z1*Sin(ang);
  //DPoint[i]._y=y1*1;
  //DPoint[i]._z=-x1*Sin(ang)+z1*Cos(ang);


/*
--------------Scrapped Variants------------

  //Pitch-Yaw-Pitch(Roll) Matrix
  cos(pitch)cos(yaw)cos(roll)+sin(pitch)(-sin(roll))	cos(pitch)*(-sin(yaw))	cos(pitch)cos(yaw)sin(roll)+sin(pitch)cos(roll)
  sin(yaw)cos(roll)	cos(yaw)	sin(yaw)sin(roll)
  -sin(pitch)cos(yaw)cos(roll)+cos(pitch)(-sin(roll)	sin(pitch)sin(yaw)	-sin(pitch)cos(yaw)sin(roll)+cos(pitch)cos(roll)


  //Pitch-Yaw Matrix 
  cos(pitch)cos(yaw)  cos(pitch)*-sin(yaw) sin(pitch)
  sin(yaw)	      cos(yaw)		   0
  -sin(pitch)cos(yaw) sin(pitch)sin(yaw)   cos(pitch)


  //Pitch-Yaw-Roll Matrix (Gets really fucky, im not using this) - talons only had pitch and roll
  cos(pitch)cos(yaw)	cos(pitch)*-sin(yaw)*cos(roll)+sin(pitch)*sin(roll) cos(pitch)*-sin(yaw)*-sin(roll)+sin(pitch)*cos(roll)
  sin(yaw)		cos(yaw)*cos(roll)				    cos(yaw)*-sin(roll)
  -sin(pitch)cos(yaw)   sin(pitch)sin(yaw)cos(roll)+cos(pitch)*sin(roll)    sin(pitch)sin(yaw)*-sin(roll)+cos(pitch)cos(roll)




 //-------------------
 //Rotate Pitch-Yaw-Pitch(Roll)
/* DPoint[i]._x=  
	x1*Cos(pitch)*Cos(yaw)+
	y1*(Cos(pitch)*(-Sin(yaw))*Cos(roll)+Sin(pitch)*Sin(roll))+
	z1*(Cos(pitch)*(-Sin(yaw))*(-Sin(roll))+Sin(pitch)*Cos(roll));

 DPoint[i]._y=    
	x1*Sin(yaw)+
	y1*Cos(yaw)*Cos(roll)+
	z1*Cos(yaw)*(-Sin(roll));*/
 //-------------------

 //-------------------
 //Rotate Pitch-Yaw-roll
/*  DPoint[i]._x=x1*Cos(pitch)*Cos(yaw)+
		y1*(Cos(pitch)*(-Sin(yaw))*Cos(roll)+Sin(pitch)*Sin(roll))+
		z1*(Cos(pitch)*(-Sin(yaw))*Sin(roll)+Sin(pitch)*Cos(roll));

  DPoint[i]._y=x1*Sin(yaw)+
	       y1*Cos(yaw)*Cos(roll)+
	       z1*(Cos(yaw)*(-Sin(roll)));
*/
 //-------------------

-------------------------------------------






//+ Working Workings +
  /*
    Z is Yaw
    X is Pitch
    Y is Roll
      pitch=é_1,
      roll=é_2,
      yaw=é_3;
  */



  z: Yaw Matrix
  cos()	-sin()	0
  sin()	cos()	0
  0	0	1


  y: Pitch Matrix
  cos()		0 	sin()
  0		1	0
  -sin()	0	cos()


  x: Roll Matrix
  1	0	0
  0	cos()	-sin()
  0	sin()	cos()



  Pitch-Roll Matrix
  Cos(pitch)	Sin(pitch)Sin(roll)	Sin(pitch)Cos(roll)
  0		Cos(roll)		-Sin(roll)
  -Sin(pitch)   Cos(pitch)Sin(roll)	Cos(pitch)Cos(roll)


+++++++++++++ Working ++++++++++++++
  Pitch-Roll-Heading(Pitch) Matrix (ZXZ)
  Cos(pitch)Cos(heading)+Sin(pitch)Cos(roll)(-Sin(heading))	Sin(pitch)Sin(roll)	Cos(pitch)Sin(heading)+Sin(Pitch)Cos(Roll)Cos(heading)
  -Sin(roll)(-Sin(heading))					Cos(roll)		-Sin(roll)*Cos(heading)
  -Sin(pitch)(Cos(heading))+Cos(pitch)Cos(roll)(-Sin(heading))  Cos(pitch)Sin(roll)	-Sin(pitch)*Sin(heading)+Cos(pitch)Cos(roll)Cos(heading)
++++++++++++++++++++++++++++++++++++



Notes:
Pitch = Up_Down
Roll = Tilt Clockwise/Anticlockwise
heading = Left_Right





**Reminder:
  Rotate around a spehere

*/


 //Rotate Pitch_Yaw
// DPoint[i]._x=x1*Cos(pitch)*Cos(yaw)+y1*Cos(pitch)*(-Sin(yaw))+z1*Sin(pitch);
// DPoint[i]._y=x1*Sin(yaw)+y1*Cos(yaw);

 //Rotate Pitch_Roll
// DPoint[i]._x=x1*Cos(pitch)+y1*Sin(pitch)*Sin(roll)+z1*Sin(pitch)*Cos(roll);
// DPoint[i]._y=y1*Cos(roll)+z1*(-Sin(roll));


 //Rotate Pitch_Roll_Pitch(heading) == Works!! (Credit: Talons)  07/08/2023
  

  _z1=x1*(Cos(pitch)*Cos(heading)+Sin(pitch)*Cos(roll)*(-Sin(heading)))+
		y1*Sin(pitch)*Sin(roll)+
		z1*(Cos(pitch)*Sin(heading)+Sin(pitch)*Cos(roll)*Cos(heading));

  _y1=x1*(-Sin(roll))*(-Sin(heading))+
		y1*Cos(roll)+
		z1*(-Sin(roll))*Cos(heading);

  _x1=x1*(-Sin(pitch)*Cos(heading)+Cos(pitch)*Cos(roll)*(-Sin(heading)))+
		y1*Cos(pitch)*Sin(roll)+
		z1*((-Sin(pitch))*Sin(heading)+Cos(pitch)*Cos(roll)*Cos(heading));



/*
  Cos(yaw)Cos(heading)+(-Sin(yaw))Cos(roll)Sin(heading)		Cos(yaw)(-Sin(heading))+(-Sin(yaw))Cos(roll)Cos(heading)	-Sin(yaw)*-Sin(roll)

  Sin(yaw)Cos(heading)+Cos(yaw)Cos(roll)Sin(heading)		Sin(yaw)(-Sin(heading))+Cos(yaw)Cos(roll)Cos(heading)		Cos(yaw)(-Sin(roll))

  Sin(roll)Sin(heading)						Sin(roll)Cos(heading)						Cos(roll)
*/
/*  _z1=  x1*(Cos(yaw)*Cos(heading)+(-Sin(yaw))*Cos(roll)*Sin(heading))+
	y1*(Cos(yaw)*(-Sin(heading))+(-Sin(yaw))*Cos(roll)*Cos(heading))+
	z1*(-Sin(yaw)*-Sin(roll));

  _y1=
	x1*(Sin(yaw)*Cos(heading)+Cos(yaw)*Cos(roll)*Sin(heading))+
        y1*(Sin(yaw)*(-Sin(heading))+Cos(yaw)*Cos(roll)*Cos(heading))+
	z1*Cos(yaw)*(-Sin(roll));

  _x1=
	x1*Sin(roll)*Sin(heading)+
	y1*Sin(roll)*Cos(heading)+
	z1*Cos(roll);*/
    
		/*fov*aspect_ratio*/
  DPoint[i]._x=_x1*m[0]+  _y1*m[4]+  _z1*m[8]+  DPoint[i].w*m[12];

			    /*fov*/
  DPoint[i]._y=_x1*m[1]+  -_y1*m[5]+  _z1*m[9]+  DPoint[i].w*m[13];

				    /*far_near*//*far_near*/
  DPoint[i]._z=_x1*m[2]+  _y1*m[6]+  _z1*m[10]+ DPoint[i].w*m[14];

				    /*1*/	/*0*/
  DPoint[i]._w=_x1*m[3]+  _y1*m[7]+  _z1*m[11]+ DPoint[i].w*m[15];
}

U0 SetDPointOnScreen(I64 i,F64 width,F64 height,F64 near,F64 far) {
  F64 half_width=width*0.5;
  F64 half_height=height*0.5;
  F64 aspect = width/height;
  MatrixMultiply(i);
  DPoint[i].screen_x=(DPoint[i]._x*width)/(2*DPoint[i]._w)+half_width;
  DPoint[i].screen_y=(DPoint[i]._y*height)/(2*DPoint[i]._w)+half_height;
  //DPoint[i].screen_x=GR_WIDTH/2+DPoint[i]._x;
  //DPoint[i].screen_y=GR_HEIGHT/2+DPoint[i]._y;
}
 
U0 MovePlayerForward(F64 dist) {//angle 0, move along X axis
  player_x+=dist*Cos(é_1);
  player_z+=dist*Sin(é_1);
}

U0 MovePlayerSideways(F64 dist) {//angle 0, move along Z axis
  player_x+=dist*Cos(é_1+pi/2);
  player_z+=dist*Sin(é_1+pi/2);
}

U0 AnimateTask(I64) {
  I64 i;
  while (TRUE) {
    if (rst_up) {
      MovePlayerForward(1);
    } else if (rst_down) {
      MovePlayerForward(-1);
    } else if (rst_left) {
      MovePlayerSideways(-1);
    } else if (rst_right) {
      MovePlayerSideways(1);
    } else if (rst_jump) {
      player_y++;
    } else if (rst_sink) {
      player_y--;
    } else if (rst_turn_clockwise) {
      é_1+=0.02;
    } else if (rst_turn_anticlockwise) {
      é_1-=0.02;
    } else if (rst_look_up) {
      é_2+=0.02;
    } else if (rst_look_down) {
      é_2-=0.02;
    } else if (rst_heading) {
      é_3+=0.02;
    } else if (rst_anti_heading) {
      é_3-=0.02;
    }

    //é_3=Sin(é_2)*Cos(é_1);
    //Auto rot
    //é_1+=0.02;
    //é_2+=0.02;
    //é_3+=0.02;
    
    if (é_1<0) {
      é_1=2*pi;
    }
    if (é_1>2*pi) {
      é_1=0;
    }
    if (é_2<0) {
      é_2=2*pi;
    }
    if (é_2>2*pi) {
      é_2=0;
    }
    if (é_3<0) {
      é_3=2*pi;
    }
    if (é_3>2*pi) {
      é_3=0;
    }
    for (i=0;i<DPOINT_NUM;i++) {
      SetDPointOnScreen(i,GR_WIDTH,GR_HEIGHT,1.0,10.0);
    }
    Sleep(6);
  }
}

U0 DrawDPoint(CTask *task,CDC *dc) {
  I64 i;
  for (i=0;i<DPOINT_NUM;i++) {
    if (1<=i<=5) {
      dc->color=RED;
    } else if (6<=i<=10) {
      dc->color=BLUE;
    } else {
      dc->color=GREEN;
    }
      GrCircle(dc,
	  DPoint[i].screen_x,
	  DPoint[i].screen_y,
	  2
      ); //Research Halted until my brain matures further 07192023
  }
}

U0 DrawIt(CTask *task,CDC *dc) {
  DrawDPoint(task,dc);
  dc->color=BLACK;
  GrPrint(dc,0,0,"x:%3.2f",player_x);
  GrPrint(dc,0,8,"y:%3.2f",player_y);
  GrPrint(dc,0,16,"z:%3.2f",player_z);
  /*
    Z is Yaw
    X is Pitch
    Y is Roll
      pitch=é_1,
      roll=é_2,
      yaw=é_3;
  */
  GrPrint(dc,0,24,"  pitchXé_1:%3.2f",é_1);
  GrPrint(dc,0,32,"   rollYé_2:%3.2f",é_2);
  GrPrint(dc,0,40,"headingZé_3:%3.2f",é_3);
}

U0 SetDPoint(I64 i,F64 x,F64 y,F64 z) {
  DPoint[i].x=x;
  DPoint[i].y=y;
  DPoint[i].z=z;
  DPoint[i].w=1.0;
}

U0 Init()
{
  I64 i;
  player_x=0;
  player_y=0;
  //player_y=100;
  player_z=0;
  é_1=0;
  é_2=0;
  é_3=0;
  SetMatrix(pi/3,GR_WIDTH/GR_HEIGHT,1.0,10.0);

  for (i=0;i<DPOINT_NUM;i++) {
    DPoint[i].x=0;
    DPoint[i].y=0;
    DPoint[i].z=0;
    DPoint[i].w=1;
    DPoint[i]._x=0;
    DPoint[i]._y=0;
    DPoint[i]._z=0;
    DPoint[i]._w=0;
  }

  SetDPoint(0,0,0,0);

  //line from 20x to 100x
  SetDPoint(1,20,0,0);
  SetDPoint(2,40,0,0);
  SetDPoint(3,60,0,0);
  SetDPoint(4,80,0,0);
  SetDPoint(5,100,0,0);



  //line from 20y to 100y
  SetDPoint(6,0,20,0);
  SetDPoint(7,0,40,0);
  SetDPoint(8,0,60,0);
  SetDPoint(9,0,80,0);
  SetDPoint(10,0,100,0);


  //line from 20z to 100z
  SetDPoint(11,0,0,20);
  SetDPoint(12,0,0,40);
  SetDPoint(13,0,0,60);
  SetDPoint(14,0,0,80);
  SetDPoint(15,0,0,100);



  SetDPoint(16,100,100,100);
  //x and y
  /*SetDPoint(16,20,20,0);
  SetDPoint(17,20,40,0);
  SetDPoint(18,20,60,0);
  SetDPoint(19,20,80,0);
  SetDPoint(20,20,100,0);


  SetDPoint(21,40,20,0);
  SetDPoint(22,40,40,0);
  SetDPoint(23,40,60,0);
  SetDPoint(24,40,80,0);
  SetDPoint(25,40,100,0);

  SetDPoint(26,60,20,0);
  SetDPoint(27,60,40,0);
  SetDPoint(28,60,60,0);
  SetDPoint(29,60,80,0);
  SetDPoint(30,60,100,0);

  SetDPoint(31,80,20,0);
  SetDPoint(32,80,40,0);
  SetDPoint(33,80,60,0);
  SetDPoint(34,80,80,0);
  SetDPoint(35,80,100,0);

  SetDPoint(36,100,20,0);
  SetDPoint(37,100,40,0);
  SetDPoint(38,100,60,0);
  SetDPoint(39,100,80,0);
  SetDPoint(40,100,100,0);

  //z and y
  SetDPoint(41,0,20,20);
  SetDPoint(42,0,40,20);
  SetDPoint(43,0,60,20);
  SetDPoint(44,0,80,20);
  SetDPoint(45,0,100,20);


  SetDPoint(46,0,20,40);
  SetDPoint(47,0,40,40);
  SetDPoint(48,0,60,40);
  SetDPoint(49,0,80,40);
  SetDPoint(50,0,100,40);

  SetDPoint(51,0,20,60);
  SetDPoint(52,0,40,60);
  SetDPoint(53,0,60,60);
  SetDPoint(54,0,80,60);
  SetDPoint(55,0,100,60);

  SetDPoint(56,0,20,80);
  SetDPoint(57,0,40,80);
  SetDPoint(58,0,60,80);
  SetDPoint(59,0,80,80);
  SetDPoint(60,0,100,80);

  SetDPoint(61,0,20,100);
  SetDPoint(62,0,40,100);
  SetDPoint(63,0,60,100);
  SetDPoint(64,0,80,100);
  SetDPoint(65,0,100,100);*/

  //Demo Map 
  rst_up=FALSE;
  rst_down=FALSE;
  rst_left=FALSE;
  rst_right=FALSE;
  rst_jump=FALSE;
  rst_sink=FALSE;
  rst_turn_clockwise=FALSE;
  rst_turn_anticlockwise=FALSE;
  rst_look_up=FALSE;
  rst_look_down=FALSE;
  rst_heading=FALSE;
  rst_anti_heading=FALSE;
}


U0 Run3D()
{
  I64 arg1,arg2;
  SettingsPush;
  AutoComplete;
  WinBorder;
  WinMax;
  DocCursor;
  DocClear;
  Init;
  Fs->animate_task=Spawn(&AnimateTask,NULL,"Animate",,Fs);
  Fs->draw_it=&DrawIt;
  try {
    while (TRUE) {
      switch(GetMsg(&arg1,&arg2,1<<MSG_KEY_DOWN+1<<MSG_KEY_UP)) { 
        case MSG_KEY_DOWN:	  
	  switch (arg1) {
	    case 0:
	      switch(arg2.u8[0]) {
	        case SC_CURSOR_UP:
		  rst_up=TRUE;
	          break;
	        case SC_CURSOR_DOWN:
		  rst_down=TRUE;
	          break;
	        case SC_CURSOR_LEFT:
		  rst_left=TRUE;
	          break;
	        case SC_CURSOR_RIGHT:
		  rst_right=TRUE;
	          break;
	      }
	      break;
	    case ' ':
	      rst_jump=TRUE;
	      break;
	    case 'z':
	      rst_sink=TRUE;
	      break;
	    case 'e':
	      rst_turn_clockwise=TRUE;
	      break;
      	    case 'q':
	      rst_turn_anticlockwise=TRUE;
	      break;
	    case 'w':
	      rst_look_up=TRUE;
	      break;
	    case 's':
	      rst_look_down=TRUE;
	      break;
	    case 'a':
	      rst_heading=TRUE;
	      break;
	    case 'd':
	      rst_anti_heading=TRUE;
	      break;
	    case'\n':
	      Init;
	      break;
       	    case CH_ESC:
            case CH_SHIFT_ESC:
	      goto _done;
 	      break;
	  }
	  break;
	case MSG_KEY_UP:
	  switch (arg1) {
	    case 0:
	      switch(arg2.u8[0]) {
	        case SC_CURSOR_UP:
		  rst_up=FALSE;
	          break;
	        case SC_CURSOR_DOWN:
		  rst_down=FALSE;
	          break;
	        case SC_CURSOR_LEFT:
		  rst_left=FALSE;
	          break;
	        case SC_CURSOR_RIGHT:
		  rst_right=FALSE;
	          break;
	      }
	      break;
	    case ' ':
	      rst_jump=FALSE;
	      break;
	    case 'z':
	      rst_sink=FALSE;
	      break;
	    case 'e':
	      rst_turn_clockwise=FALSE;
	      break;
	    case 'w':
	      rst_look_up=FALSE;
	      break;
	    case 's':
	      rst_look_down=FALSE;
	      break;
      	    case 'q':
	      rst_turn_anticlockwise=FALSE;
	      break;
	    case 'a':
	      rst_heading=FALSE;
	      break;
	    case 'd':
	      rst_anti_heading=FALSE;
	      break;
	  }
	  break;
      }
    }      
_done:
  } catch
    PutExcept;
  SettingsPop;
  MenuPop;
}

Run3D;
